/**
 * 
 */
package com.test;

/**
 * @author 23712
 *
 */
public class Test {

	/**
	 * @param args
	 * 
	 * OOP--面向对象,JAVA的核心思想
	 * 
	 * 类与对象：
	 * 
	 * 类：实体类、测试类、常量类
	 * 实体类：内容(属性、get/set方法、构造函数、打印方法tostring，和数据库的表相对应。
	 * 测试类：用于开发人员测试自己的代码，上线以后是没有测试类。
	 * 常量类：经常项目会出现的一些属性(初始化值，且不能改变)。
	 * 
	 * 对象：是通过类名去创建出来的，它可以调用属性和方法。
	 * 
	 * OOP的三大基本原则：封装、继承、多态
	 * 封装：私有化属性、公开get/set方法。    作用：保护类的属性
	 * 继承：子类继承父类(extends--单继承)。   作用：优化代码--减少重复代码
	 * 多态：不同的对象作用在同一个方法上，所表现出的不同形态。     作用：优化代码--优化代码结构
	 * 
	 * 方法：四种方法
	 * 方法的重写：子类重写父类的方法，修饰符、返回类型、方法名、参数个数、参数类型都一致，方法体内容不一样    作用：减少方法名
	 * 方法的重载：出现在同一个类中，修饰符、返回类型、方法名相同，但是参数个数、参数类型不一致。
	 * 
	 * 构造函数：没有方法体  作用：用来类去创建对象的时候调用。
	 * Object：所有的类都直接和间接继承于它，它里面有一个无参的构造函数
	 * final： 作用在类上，会让这个类没有办法被继承，且不能实例化
	 *        作用在方法上，会让这个方法没有办法被重写
	 *        作用在属性上，这个属性会由变量变为常量，并且一定要有初始化的值
	 * static：作用在方法和属性上时，就能通过类名去直接调用
	 * 抽象类(abstract)：作用在类上，类无法被实现；作用在方法上，方法没有方法体
	 *                  抽象方法只能放在抽象类中
	 * 接口：是一个特殊的抽象类，它里面不能有正常的方法，只会有抽象方法，常称为--设计者
	 * 
	 * 
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}

}
